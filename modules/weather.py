# modules/weather.py
import os
import logging
import requests

from aiogram import Router, F, Bot
from aiogram.filters import Command
from aiogram.types import Message
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.cron import CronTrigger

# --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ---
YANDEX_API_KEY = os.getenv("YANDEX_WEATHER_API_KEY")
YANDEX_WEATHER_API_KEY="62061bd3-0025-4be3-99f3-210ca881e8c5"

# –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –ü–µ–º—Ä—å)
LATITUDE = 58.010455
LONGITUDE = 56.229443

router = Router()
logger = logging.getLogger(__name__)

# --- –§—É–Ω–∫—Ü–∏–∏ ---
def get_weather_forecast():
    """–ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ —Å API –Ø–Ω–¥–µ–∫—Å.–ü–æ–≥–æ–¥—ã."""
    if not YANDEX_API_KEY:
        logger.error("Yandex Weather API key is not set.")
        return None
    
    url = f"https://api.weather.yandex.ru/v2/forecast?lat={LATITUDE}&lon={LONGITUDE}&lang=ru_RU"
    headers = {"X-Yandex-API-Key": YANDEX_API_KEY}
    
    try:
        response = requests.get(url, headers=headers)
        response.raise_for_status()  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ—à–∏–±–∫–∏ HTTP
        return response.json()
    except requests.exceptions.RequestException as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–≥–æ–¥—ã: {e}")
        return None

def format_weather_message(data: dict) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ –≤ —á–∏—Ç–∞–µ–º–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –¥–∞–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏."""
    if not data:
        return "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã. üòî"

    fact = data['fact']

    temp = fact['temp']
    feels_like = fact['feels_like']
    condition = fact['condition']
    wind_speed = fact['wind_speed']
    prec_type = fact['prec_type']
    
    conditions = {
        'clear': '—è—Å–Ω–æ ‚òÄÔ∏è', 'partly-cloudy': '–º–∞–ª–æ–æ–±–ª–∞—á–Ω–æ üå§Ô∏è',
        'cloudy': '–æ–±–ª–∞—á–Ω–æ —Å –ø—Ä–æ—è—Å–Ω–µ–Ω–∏—è–º–∏ üå•Ô∏è', 'overcast': '–ø–∞—Å–º—É—Ä–Ω–æ ‚òÅÔ∏è',
        'drizzle': '–º–æ—Ä–æ—Å—å üíß', 'light-rain': '–Ω–µ–±–æ–ª—å—à–æ–π –¥–æ–∂–¥—å üå¶Ô∏è',
        'rain': '–¥–æ–∂–¥—å üåßÔ∏è', 'moderate-rain': '—É–º–µ—Ä–µ–Ω–Ω–æ —Å–∏–ª—å–Ω—ã–π –¥–æ–∂–¥—å üåßÔ∏è',
        'heavy-rain': '—Å–∏–ª—å–Ω—ã–π –¥–æ–∂–¥—å üåßÔ∏è', 'continuous-heavy-rain': '–¥–ª–∏—Ç–µ–ª—å–Ω—ã–π —Å–∏–ª—å–Ω—ã–π –¥–æ–∂–¥—å üåßÔ∏è',
        'showers': '–ª–∏–≤–µ–Ω—å ‚õàÔ∏è', 'wet-snow': '–¥–æ–∂–¥—å —Å–æ —Å–Ω–µ–≥–æ–º üå®Ô∏è',
        'light-snow': '–Ω–µ–±–æ–ª—å—à–æ–π —Å–Ω–µ–≥ ‚ùÑÔ∏è', 'snow': '—Å–Ω–µ–≥ ‚ùÑÔ∏è',
        'snow-showers': '—Å–Ω–µ–≥–æ–ø–∞–¥ üå®Ô∏è', 'hail': '–≥—Ä–∞–¥ üå®Ô∏è', 'thunderstorm': '–≥—Ä–æ–∑–∞ üå©Ô∏è',
        'thunderstorm-with-rain': '–¥–æ–∂–¥—å —Å –≥—Ä–æ–∑–æ–π ‚õàÔ∏è', 'thunderstorm-with-hail': '–≥—Ä–æ–∑–∞ —Å –≥—Ä–∞–¥–æ–º ‚õàÔ∏è'
    }
    
    # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –æ–¥–µ–∂–¥–µ
    clothing_advice = ""
    if feels_like > 25:
        clothing_advice = "–û—á–µ–Ω—å –∂–∞—Ä–∫–æ. –ù–∞–¥–µ–Ω—å—Ç–µ —á—Ç–æ-—Ç–æ –ª—ë–≥–∫–æ–µ: —à–æ—Ä—Ç—ã, —Ñ—É—Ç–±–æ–ª–∫—É, —Å–∞–Ω–¥–∞–ª–∏–∏."
    elif 18 <= feels_like <= 25:
        clothing_advice = "–¢–µ–ø–ª–æ. –§—É—Ç–±–æ–ª–∫–∞ –∏ –¥–∂–∏–Ω—Å—ã –∏–ª–∏ –ª—ë–≥–∫–æ–µ –ø–ª–∞—Ç—å–µ –±—É–¥—É—Ç –≤ —Å–∞–º—ã–π —Ä–∞–∑."
    elif 10 <= feels_like < 18:
        clothing_advice = "–ü—Ä–æ—Ö–ª–∞–¥–Ω–æ. –°—Ç–æ–∏—Ç –Ω–∞–∫–∏–Ω—É—Ç—å –ª—ë–≥–∫—É—é –∫—É—Ä—Ç–∫—É, –≤–µ—Ç—Ä–æ–≤–∫—É –∏–ª–∏ —Å–≤–∏—Ç–µ—Ä."
    elif 0 <= feels_like < 10:
        clothing_advice = "–•–æ–ª–æ–¥–Ω–æ. –ù–∞–¥–µ–Ω—å—Ç–µ —Ç—ë–ø–ª—É—é –∫—É—Ä—Ç–∫—É –∏–ª–∏ –ø–∞–ª—å—Ç–æ, —à–∞–ø–∫—É –∏ –ø–µ—Ä—á–∞—Ç–∫–∏."
    else:
        clothing_advice = "–û—á–µ–Ω—å —Ö–æ–ª–æ–¥–Ω–æ! –û–¥–µ–≤–∞–π—Ç–µ—Å—å –∫–∞–∫ –º–æ–∂–Ω–æ —Ç–µ–ø–ª–µ–µ: –ø—É—Ö–æ–≤–∏–∫, —à–∞–ø–∫–∞, —à–∞—Ä—Ñ, –≤–∞—Ä–µ–∂–∫–∏."

    if prec_type > 0 and 'rain' in conditions.get(condition, ''):
        clothing_advice += "\n–ù–µ –∑–∞–±—É–¥—å—Ç–µ –≤–∑—è—Ç—å –∑–æ–Ω—Ç! ‚òîÔ∏è"
    elif prec_type > 0 and 'snow' in conditions.get(condition, ''):
        clothing_advice += "\n–ù–∞ –¥–æ—Ä–æ–≥–∞—Ö –º–æ–∂–µ—Ç –±—ã—Ç—å —Å–∫–æ–ª—å–∑–∫–æ."

    message = (
        f"<b>–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ! –ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:</b>\n\n"
        f"üå°Ô∏è –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: <b>{temp}¬∞C</b> (–æ—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫ {feels_like}¬∞C)\n"
        f"üìù –°–æ—Å—Ç–æ—è–Ω–∏–µ: {conditions.get(condition, condition)}\n"
        f"üí® –í–µ—Ç–µ—Ä: {wind_speed} –º/—Å\n\n"
        f"üëï <b>–°–æ–≤–µ—Ç –ø–æ –æ–¥–µ–∂–¥–µ:</b>\n{clothing_advice}"
    )
    return message


@router.message(Command("weather"))
async def send_weather_now(message: Message):
    await message.answer("üîç –£–∑–Ω–∞—é –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã...")
    weather_data = get_weather_forecast()
    response_message = format_weather_message(weather_data)
    await message.answer(response_message)

# --- –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ ---
async def send_daily_weather(bot: Bot, user_id: int):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã."""
    logger.info(f"Sending daily weather to {user_id}")
    weather_data = get_weather_forecast()
    response_message = format_weather_message(weather_data)
    await bot.send_message(user_id, response_message)

async def schedule_jobs(scheduler: AsyncIOScheduler, bot: Bot, user_id: int):
    # –ï–∂–µ–¥–Ω–µ–≤–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–æ–≥–æ–¥–µ –≤ 08:30 (GMT+5) –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    scheduler.add_job(
        send_daily_weather,
        trigger=CronTrigger(hour=8, minute=30),
        args=[bot, user_id],
        id='daily_weather_notification',
        replace_existing=True
    )
    logger.info("–ó–∞–¥–∞—á–∏ –º–æ–¥—É–ª—è 'weather' —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω—ã.")