# modules/mood_tracker.py
import asyncio
import sqlite3
from datetime import datetime, timedelta
import os
import logging
import matplotlib.pyplot as plt
import seaborn as sns
from aiogram import Router, F, Bot
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton, FSInputFile
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.cron import CronTrigger
from dotenv import load_dotenv
from keyboards.modules_inline import *
from databases.add_mood_to_db import *

# --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –º–æ–¥—É–ª—è ---
load_dotenv("config.env")
DB_PATH = "databases/mood_base.db"
CHARTS_PATH = "monthly_chart" # –ü–∞–ø–∫–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–æ–≤
ADMIN_ID = int(os.getenv("ADMIN_ID"))

os.makedirs(CHARTS_PATH, exist_ok=True)
os.makedirs("databases", exist_ok=True)

router = Router()
logger = logging.getLogger(__name__)

# --- –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö ---




# --- –°–ª–æ–≤–∞—Ä–∏ –∏ –ø–∞–ª–∏—Ç—Ä—ã –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–π ---
# –°–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ ID –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è —Å –µ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏–µ–º –∏ —ç–º–æ–¥–∑–∏
MOOD_MAP = {
    0: "–ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ üòä", 1: "–£—Å—Ç–∞–≤—à–µ–µ üò©", 2: "–ì—Ä—É—Å—Ç–Ω–æ–µ üò¢", 3: "–ó–ª–æ–µ üò†",
    4: "–í–æ—Å—Ö–∏—Ç–∏—Ç–µ–ª—å–Ω–æ–µ ü§©", 5: "–†–∞–∑–¥—Ä–∞–∂—ë–Ω–Ω–æ–µ üòñ", 6: "–°–ø–æ–∫–æ–π–Ω–æ–µ üôÇ", 7: "–≠–Ω–µ—Ä–≥–∏—á–Ω–æ–µ ‚ö°Ô∏è",
    8: "–¢—Ä–µ–≤–æ–∂–Ω–æ–µ üò∞", 9: "–í–æ–æ–¥—É—à–µ–≤–ª—ë–Ω–Ω–æ–µ ü§Ø", 10: "–°–∫—É—á–∞—é—â–µ–µ ü´†", 11: "–í–ª—é–±–ª—ë–Ω–Ω–æ–µ ü•∞",
    12: "–ë–µ–∑—Ä–∞–∑–ª–∏—á–Ω–æ–µ ü•±", 13: "–ò—Å–ø—É–≥–∞–Ω–Ω–æ–µ üò±", 14: "–ì–æ—Ä–¥–æ–µ üòé", 15: "–ó–∞–≤–∏—Å—Ç–ª–∏–≤–æ–µ üòí",
    16: "–†–∞—Å—Ç–µ—Ä—è–Ω–Ω–æ–µ üòì", 17: "–ò–≥—Ä–∏–≤–æ–µ üòè", 18: "–°–æ—Å—Ä–µ–¥–æ—Ç–æ—á–µ–Ω–Ω–æ–µ ü§î", 19: "–ë–æ–ª–µ–∑–Ω–µ–Ω–Ω–æ–µ ü§ß"
}

MOOD_PALETTE = sns.color_palette("viridis", len(MOOD_MAP)).as_hex()

# --- –§—É–Ω–∫—Ü–∏—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞ ---
def make_and_save_plot(period_name: str, moods_in_period: dict, year: str = ""):
    """–°–æ–∑–¥–∞–µ—Ç –∫—Ä—É–≥–æ–≤—É—é –¥–∏–∞–≥—Ä–∞–º–º—É, —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –µ—ë –≤ —Ñ–∞–π–ª –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Ç—å."""
    if not moods_in_period:
        return None # –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º None

    labels = [MOOD_MAP[mid] for mid in moods_in_period.keys()]
    sizes = list(moods_in_period.values())
    colors = [MOOD_PALETTE[mid] for mid in moods_in_period.keys()]
    
    plt.figure(figsize=(10, 8)) # –ó–∞–¥–∞–µ–º —Ä–∞–∑–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    # –°–æ–∑–¥–∞–µ–º –¥–∏–∞–≥—Ä–∞–º–º—É —Å –ø—Ä–æ—Ü–µ–Ω—Ç–∞–º–∏
    plt.pie(sizes, labels=[l.split(' ')[0] for l in labels], colors=colors, autopct='%1.1f%%', startangle=140)
    plt.title(f"–ì—Ä–∞—Ñ–∏–∫ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è –∑–∞ {period_name} {year}", fontsize=16) # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å –≥–æ–¥–æ–º
    plt.axis('equal') # –î–µ–ª–∞–µ–º –¥–∏–∞–≥—Ä–∞–º–º—É –∫—Ä—É–≥–ª–æ–π
    plt.legend(labels, bbox_to_anchor=(1.05, 1), loc='upper left') # –í—ã–Ω–æ—Å–∏–º –ª–µ–≥–µ–Ω–¥—É –∑–∞ –ø—Ä–µ–¥–µ–ª—ã –¥–∏–∞–≥—Ä–∞–º–º—ã
    plt.tight_layout() # –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ–º —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    
    filename = f"{ADMIN_ID}_plot_{period_name.replace(' ', '_')}.png"
    filepath = os.path.join(CHARTS_PATH, filename)
    plt.savefig(filepath, dpi=300, bbox_inches='tight') # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –≤—ã—Å–æ–∫–æ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–∏
    plt.close() # –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø–ª–æ—Ç—Ç–µ—Ä, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —É—Ç–µ—á–µ–∫ –ø–∞–º—è—Ç–∏
    return filepath

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ (—Ö–µ–Ω–¥–ª–µ—Ä—ã) ---
@router.callback_query(F.data == "record_mood")
async def process_record_mood_callback(callback: CallbackQuery):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É '–ó–∞–ø–∏—Å—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è'."""
    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏ –∫–∞–∫–æ–µ —É —Ç–µ–±—è —Å–µ–≥–æ–¥–Ω—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ:",
        reply_markup=get_mood_selection_keyboard()
    )
    await callback.answer() # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ –∫–æ–ª–±—ç–∫, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å "—á–∞—Å–∏–∫–∏" –Ω–∞ –∫–Ω–æ–ø–∫–µ

@router.callback_query(F.data.startswith("mood_"))
async def process_mood_selection_callback(callback: CallbackQuery):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è."""
    mood_id = int(callback.data.split("_")[1])
    mood_text = MOOD_MAP.get(mood_id, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ")

    add_mood_to_db(mood_id) # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±–æ—Ä –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö

    await callback.message.edit_text(
        f"–ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ '<b>{mood_text}</b>' –∑–∞–ø–∏—Å–∞–Ω–æ!\n–°–ø–∞—Å–∏–±–æ! ‚ú®",
        reply_markup=None # –£–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞
    )
    await callback.answer(text=f"–ó–∞–ø–∏—Å–∞–Ω–æ: {mood_text}")
    logger.info(f"Admin {ADMIN_ID} recorded mood: {mood_text}")

    await asyncio.sleep(2) # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    await callback.message.answer(
        "–ß—Ç–æ –¥–∞–ª—å—à–µ?",
        reply_markup=get_main_menu_keyboard()
    )

@router.callback_query(F.data.in_(["plot_of_mood", "plot_back"]))
async def show_plot_period_selection(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–∏–æ–¥–∞ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞."""
    keyboard = get_plot_period_keyboard()
    if not keyboard.inline_keyboard:
        await callback.message.edit_text(
            "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è. –°–Ω–∞—á–∞–ª–∞ —Å–¥–µ–ª–∞–π—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–∞–ø–∏—Å–µ–π!",
            reply_markup=get_main_menu_keyboard()
        )
    else:
        await callback.message.edit_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:",
            reply_markup=keyboard
        )
    await callback.answer()
    
@router.callback_query(F.data.startswith("plot_page_"))
async def handle_plot_pagination(callback: CallbackQuery):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏."""
    page = int(callback.data.split("_")[2])
    keyboard = get_plot_period_keyboard(page)
    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:",
        reply_markup=keyboard
    )
    await callback.answer()

@router.callback_query(F.data.startswith("plot_"))
async def show_selected_plot(callback: CallbackQuery):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≥—Ä–∞—Ñ–∏–∫ –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥."""
    await callback.answer("–ì–µ–Ω–µ—Ä–∏—Ä—É—é –≥—Ä–∞—Ñ–∏–∫...") # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    period_type = callback.data.split("_")[1]
    
    all_moods = get_moods_from_db()
    mood_counts = {}
    period_name = ""
    year = ""

    # –õ–æ–≥–∏–∫–∞ –¥–ª—è –º–µ—Å—è—á–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞
    if period_type == "month":
        year_month = callback.data.split("_")[2] # "–ì–ì–ì–ì-–ú–ú"
        year, month_num_str = year_month.split('-')
        months_list_ru = ["–Ø–Ω–≤–∞—Ä—å", '–§–µ–≤—Ä–∞–ª—å', '–ú–∞—Ä—Ç', '–ê–ø—Ä–µ–ª—å', '–ú–∞–π', '–ò—é–Ω—å', '–ò—é–ª—å', '–ê–≤–≥—É—Å—Ç', '–°–µ–Ω—Ç—è–±—Ä—å', '–û–∫—Ç—è–±—Ä—å', '–ù–æ—è–±—Ä—å', '–î–µ–∫–∞–±—Ä—å']
        period_name = months_list_ru[int(month_num_str) - 1]
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º –∑–∞–ø–∏—Å–∏ –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É –º–µ—Å—è—Ü—É
        filtered_moods = [m for m in all_moods if m[0].startswith(year_month)]
        for _, mood_id in filtered_moods:
            mood_counts[mood_id] = mood_counts.get(mood_id, 0) + 1
            
    # –õ–æ–≥–∏–∫–∞ –¥–ª—è –Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞
    elif period_type == "week":
        period_name = "–ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–µ–¥–µ–ª—é"
        today = datetime.now()
        last_week_start = today - timedelta(days=7)
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º –∑–∞–ø–∏—Å–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π
        filtered_moods = [
            m for m in all_moods 
            if last_week_start <= datetime.strptime(m[0], '%Y-%m-%d %H:%M:%S') <= today
        ]
        for _, mood_id in filtered_moods:
            mood_counts[mood_id] = mood_counts.get(mood_id, 0) + 1
    
    path_to_plot = make_and_save_plot(period_name, mood_counts, year)
    
    if path_to_plot:
        photo = FSInputFile(path_to_plot)
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥—Ä–∞—Ñ–∏–∫ –∫–∞–∫ —Ñ–æ—Ç–æ
        await callback.message.answer_photo(
            photo=photo,
            caption=f"–í–æ—Ç –≤–∞—à–∞ –¥–∏–∞–≥—Ä–∞–º–º–∞ –∑–∞ <b>{period_name} {year}</b>",
            reply_markup=get_main_menu_keyboard()
        )
        await callback.message.delete() # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
    else:
        await callback.message.edit_text(
            f"–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞ –∑–∞ <b>{period_name} {year}</b>.",
            reply_markup=get_main_menu_keyboard()
        )

# --- –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –æ—Ç—á–µ—Ç—ã ---
async def send_weekly_report(bot: Bot, user_id: int):
    """–ì–æ—Ç–æ–≤–∏—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç."""
    logger.info("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞.")
    all_moods = get_moods_from_db()
    mood_counts = {}
    
    today = datetime.now()
    last_week_start = today - timedelta(days=7)
    
    # –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–µ–¥–µ–ª—é
    filtered_moods = [
        m for m in all_moods 
        if last_week_start <= datetime.strptime(m[0], '%Y-%m-%d %H:%M:%S') <= today
    ]
    for _, mood_id in filtered_moods:
        mood_counts[mood_id] = mood_counts.get(mood_id, 0) + 1
        
    path_to_plot = make_and_save_plot("–Ω–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á—ë—Ç", mood_counts)
    
    if path_to_plot:
        photo = FSInputFile(path_to_plot)
        await bot.send_message(user_id, "üíå <b>–í–∞—à –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á—ë—Ç:</b>")
        await bot.send_photo(
            chat_id=user_id,
            photo=photo,
            caption="–ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –∑–∞ –ø—Ä–æ—à–µ–¥—à—É—é –Ω–µ–¥–µ–ª—é."
        )
    else:
        await bot.send_message(user_id, "üíå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –æ—Ç—á—ë—Ç–∞.")

async def send_monthly_heatmap(bot: Bot, user_id: int):
    """–ì–æ—Ç–æ–≤–∏—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –µ–∂–µ–º–µ—Å—è—á–Ω—ã–π –æ—Ç—á–µ—Ç (heatmap)."""
    # –†–µ–∞–ª–∏–∑–∞—Ü–∏—è heatmap - —Å–ª–æ–∂–Ω–∞—è –∑–∞–¥–∞—á–∞. –ü–æ–∫–∞ —á—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–≥–ª—É—à–∫—É.
    logger.info("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –µ–∂–µ–º–µ—Å—è—á–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ (heatmap).")
    await bot.send_message(
        user_id,
        "üóìÔ∏è <b>–í–∞—à –µ–∂–µ–º–µ—Å—è—á–Ω—ã–π –æ—Ç—á—ë—Ç (heatmap)</b>\n\n"
        "<i>(–§—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ heatmap –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ. –°–∫–æ—Ä–æ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –∫—Ä–∞—Å–∏–≤–∞—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è!)</i>"
    )

async def schedule_jobs(scheduler: AsyncIOScheduler, bot: Bot, user_id: int):
    """–î–æ–±–∞–≤–ª—è–µ—Ç –∑–∞–¥–∞—á–∏ –ø–æ –æ—Ç—á–µ—Ç–∞–º –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫."""
    # –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –∫–∞–∂–¥–æ–µ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ –≤ 19:00 (GMT+5)
    scheduler.add_job(
        send_weekly_report,
        trigger=CronTrigger(day_of_week='sun', hour=19, minute=0),
        args=[bot, user_id],
        id='weekly_mood_report',
        replace_existing=True
    )
    # –ï–∂–µ–º–µ—Å—è—á–Ω—ã–π –æ—Ç—á–µ—Ç –≤ –ø–æ—Å–ª–µ–¥–Ω–∏–π –¥–µ–Ω—å –º–µ—Å—è—Ü–∞ –≤ 19:00 (GMT+5)
    scheduler.add_job(
        send_monthly_heatmap,
        trigger=CronTrigger(day='last', hour=19, minute=0),
        args=[bot, user_id],
        id='monthly_mood_report',
        replace_existing=True
    )
    logger.info("–ó–∞–¥–∞—á–∏ –º–æ–¥—É–ª—è 'mood_tracker' —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω—ã.")