# modules/daily_words.py
import os
import logging
import re
import random
from aiogram import Router, Bot
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.cron import CronTrigger
from aiogram.enums import ParseMode

# --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ---
WORDS_FILE_PATH = os.getenv("PATH_TO_WORDS_FILE")

router = Router()
logger = logging.getLogger(__name__)

# --- –§—É–Ω–∫—Ü–∏–∏ ---
def get_random_word() -> tuple[str]|None:
    """ –ß–∏—Ç–∞–µ—Ç —Ñ–∞–π–ª –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª—É—á–∞–π–Ω–æ–µ —Å–ª–æ–≤–æ –∏ –µ–≥–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ. """
    if not WORDS_FILE_PATH or not os.path.exists(WORDS_FILE_PATH):
        logger.error(f"–§–∞–π–ª —Å–æ —Å–ª–æ–≤–∞–º–∏ –Ω–µ –±—ã–ª –Ω–∞–π–¥–µ–Ω: {WORDS_FILE_PATH}")
        return None

    try:
        with open(WORDS_FILE_PATH, 'r', encoding='utf-8') as f:
            content = f.read()
        
        # –®–∞–±–ª–æ–Ω –¥–ª—è –ø–æ–∏—Å–∫–∞: **—Å–ª–æ–≤–æ** ‚Äî –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ
        pattern = re.compile(r'\*\*(.*?)\*\* ‚Äî (.*)', re.MULTILINE)
        matches = pattern.findall(content)
        
        if not matches:
            logger.warning("–í —Ñ–∞–π–ª–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ —Å–ª–æ–≤ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ.")
            return None
        
        word, definition = random.choice(matches)
        return word.strip(), definition.strip()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ —Å–æ —Å–ª–æ–≤–∞–º–∏: {e}")
        return None

# --- –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ ---
async def send_daily_word(bot: Bot, user_id: int):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–µ —Å–ª–æ–≤–æ."""
    logger.info(f"Sending daily word to {user_id}")
    word_data = get_random_word()
    
    if word_data:
        word, definition = word_data
        message = (
            f"üßê <b>–°–ª–æ–≤–æ –¥–Ω—è:</b> {word}\n\n"
            f"<b>–ó–Ω–∞—á–µ–Ω–∏–µ:</b> {definition}"
        )
        await bot.send_message(user_id, message, parse_mode=ParseMode.HTML)
    else:
        await bot.send_message(user_id, "–ù–µ —Å–º–æ–≥ –Ω–∞–π—Ç–∏ –Ω–æ–≤–æ–µ —Å–ª–æ–≤–æ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª-–∏—Å—Ç–æ—á–Ω–∏–∫.")

async def schedule_jobs(scheduler: AsyncIOScheduler, bot: Bot, user_id: int):
    # –ï–∂–µ–¥–Ω–µ–≤–Ω–æ–µ —Å–ª–æ–≤–æ –¥–Ω—è. –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤ 14:00 (GMT+5)
    scheduler.add_job(
        send_daily_word,
        trigger=CronTrigger(hour=14, minute=0),
        args=[bot, user_id],
        id='daily_word_notification',
        replace_existing=True
    )
    logger.info("–ó–∞–¥–∞—á–∏ –º–æ–¥—É–ª—è 'daily_word' —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω—ã.")